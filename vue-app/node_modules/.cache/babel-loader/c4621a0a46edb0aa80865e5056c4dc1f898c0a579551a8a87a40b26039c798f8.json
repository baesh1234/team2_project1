{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: 'Section2',\n  data() {\n    return {\n      to: '',\n      s2message: ''\n    };\n  },\n  methods: {\n    /***Section2 function***/\n    getData() {\n      axios.post('http://localhost:8080/findAll').then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    s2selectAllCheckbox(event) {\n      const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\n      checkboxes.forEach(checkbox => {\n        checkbox.checked = event.target.checked;\n      });\n    },\n    //모두 선택되었을때 개별체크박스가 해제되면 전체선택체크박스를 해제하는 함수\n    s2uncheckSelectAll() {\n      // 전체 선택 체크박스를 가져옵니다.\n      const selectAllCheckboxes = document.querySelectorAll('input[value=\"selectall\"]');\n      // 모든 전체 선택 체크박스에 대해 반복합니다.\n      selectAllCheckboxes.forEach(selectAllCheckbox => {\n        // 만약 전체 선택 체크박스가 선택되어 있다면 실행합니다.\n        if (selectAllCheckbox.checked) {\n          // 모든 개별 체크박스를 가져옵니다.\n          const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\n          let allChecked = true;\n          // 각 개별 체크박스를 확인하여 모두 선택되었는지 확인합니다.\n          checkboxes.forEach(checkbox => {\n            if (!checkbox.checked) {\n              allChecked = false;\n            }\n          });\n          // 개별 체크박스 중 하나라도 선택되지 않은 경우 전체 선택 체크박스를 해제합니다.\n          if (!allChecked) {\n            selectAllCheckbox.checked = false;\n          }\n        }\n      });\n    },\n    //모든 개별 체크박스가 선택되었을 때 전체 선택 체크박스를 체크하는 함수\n    s2checkSelectAll() {\n      const selectAllCheckboxes = document.querySelectorAll('input[value=\"selectall\"]');\n      selectAllCheckboxes.forEach(selectAllCheckbox => {\n        // 만약 전체 선택 박스가 체크 해제되어 있다면 실행합니다.\n        if (!selectAllCheckbox.checked) {\n          // 모든 개별 체크박스를 가져옵니다.\n          const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\n          let allChecked = true;\n          // 모든 개별 체크박스에 대해 반복합니다.\n          checkboxes.forEach(checkbox => {\n            // 만약 하나라도 체크되지 않은 상태라면 모든 체크박스가 선택되지 않은 것으로 표시합니다.\n            if (!checkbox.checked) {\n              allChecked = false;\n            }\n          });\n          // 모든 개별 체크박스가 선택되어 있다면 전체 선택 체크박스를 체크합니다.\n          if (allChecked) {\n            selectAllCheckbox.checked = true;\n          }\n        }\n      });\n    },\n    //이메일 인증 버튼\n    async sendEmail() {\n      try {\n        const response = await axios.post('http://localhost:8080/sendEmail', {\n          to: this.to\n        });\n        this.s2message = '이메일이 성공적으로 전송 되었습니다.';\n      } catch (error) {\n        this.s2message = '이메일이 전송이 실패 했습니다.';\n      }\n    },\n    //사전예약 등록 버튼 alert 출력\n    s2AlertBtn() {\n      const emailMsg = document.querySelector('.s2emailMsg');\n      const emailVerified = emailMsg.style.display === 'block';\n      const selectAllCheckbox = document.querySelector('input[value=\"selectall\"]');\n      const allAgreed = selectAllCheckbox.checked;\n      if (emailVerified && allAgreed) {\n        // SweetAlert2로 'O' 알림을 출력하고, 확인 버튼을 누르면 다음 섹션으로 이동합니다.\n        Swal.fire({\n          icon: 'success',\n          title: '모든 조건이 충족되었습니다.',\n          showConfirmButton: true\n        }).then(() => {\n          // alert의 확인버튼을 누를시 section3으로 이동\n          // section3으로 이동합니다.\n          fullpage_api.moveTo(4);\n          console.log('slide');\n        });\n      } else {\n        // SweetAlert2로 'X' 알림을 출력합니다.\n        Swal.fire({\n          icon: 'error',\n          title: '이메일 인증이 완료되었고 모든 항목에 동의해야 합니다.',\n          showConfirmButton: false,\n          timer: 1500 // 1.5초 후에 자동으로 닫힙니다.\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","to","s2message","methods","getData","post","then","response","console","log","catch","error","s2selectAllCheckbox","event","checkboxes","document","querySelectorAll","forEach","checkbox","checked","target","s2uncheckSelectAll","selectAllCheckboxes","selectAllCheckbox","allChecked","s2checkSelectAll","sendEmail","s2AlertBtn","emailMsg","querySelector","emailVerified","style","display","allAgreed","Swal","fire","icon","title","showConfirmButton","fullpage_api","moveTo","timer"],"sources":["C:\\git\\teamproject1\\vue-app\\src\\components\\Section2.vue"],"sourcesContent":["<template>\r\n  <div class=\"section s2\">\r\n    <img  src=\"../assets/images/section2Title.png\" alt=\"titleImg\" class=\"titleImg\">\r\n    <img src=\"../assets/images/section2Subbg.png\" alt=\"초대장\" class=\"subBg\">\r\n    <div  id=\"section2Form\" class=\"row g-3\">\r\n      <form @submit.prevent=\"sendEmail\">\r\n        <input type=\"email\" v-model=\"to\" placeholder=\"Enter your email\" required />\r\n        <button>인증메일보내기</button>\r\n      </form>\r\n    </div>\r\n    <p v-if=\"s2message\">{{ s2message }}</p>\r\n    <div class=\"container s2checkContainer\">\r\n      <input type='checkbox'\r\n             name='agreeall'\r\n             value='selectall'\r\n             @click='s2selectAllCheckbox($event)'/> <b>아래 내용을 확인하였으며,모두 동의 합니다.</b>\r\n      <br />\r\n      <input type='checkbox'\r\n             name='agree'\r\n             value='age'\r\n             @click='s2uncheckSelectAll()||s2checkSelectAll()'/> 만 14세 이상입니다.\r\n      <br />\r\n      <input type='checkbox'\r\n             name='agree'\r\n             value='personalInfo'\r\n             @click='s2uncheckSelectAll()||s2checkSelectAll()'/> 개인정보 수집 및 이용 동의\r\n      <br />\r\n      <input type='checkbox'\r\n             name='agree'\r\n             value='eventAgree'\r\n             @click='s2uncheckSelectAll()||s2checkSelectAll()'/> 이벤트 등 프로모션 알림 수신 동의\r\n    </div>\r\n    <a @click='s2AlertBtn()'><img src=\"../assets/images/s2submitButton.png\" alt=\"submitBtnImg\" class=\"s2submitBtn\"></a>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: 'Section2',\r\n  data() {\r\n    return {\r\n      to: '',\r\n      s2message: ''\r\n    };\r\n  },\r\n  methods: {\r\n    /***Section2 function***/\r\n    getData() {\r\n      axios.post('http://localhost:8080/findAll')\r\n          .then((response) => {\r\n            console.log(response)\r\n          })\r\n          .catch((error) => {\r\n            console.log(error)\r\n          })\r\n    },\r\n    s2selectAllCheckbox(event) {\r\n      const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\r\n      checkboxes.forEach((checkbox) => {\r\n        checkbox.checked = event.target.checked;\r\n      });\r\n    },\r\n    //모두 선택되었을때 개별체크박스가 해제되면 전체선택체크박스를 해제하는 함수\r\n    s2uncheckSelectAll() {\r\n      // 전체 선택 체크박스를 가져옵니다.\r\n      const selectAllCheckboxes = document.querySelectorAll('input[value=\"selectall\"]');\r\n      // 모든 전체 선택 체크박스에 대해 반복합니다.\r\n      selectAllCheckboxes.forEach((selectAllCheckbox) => {\r\n        // 만약 전체 선택 체크박스가 선택되어 있다면 실행합니다.\r\n        if (selectAllCheckbox.checked) {\r\n          // 모든 개별 체크박스를 가져옵니다.\r\n          const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\r\n          let allChecked = true;\r\n          // 각 개별 체크박스를 확인하여 모두 선택되었는지 확인합니다.\r\n          checkboxes.forEach((checkbox) => {\r\n            if (!checkbox.checked) {\r\n              allChecked = false;\r\n            }\r\n          });\r\n          // 개별 체크박스 중 하나라도 선택되지 않은 경우 전체 선택 체크박스를 해제합니다.\r\n          if (!allChecked) {\r\n            selectAllCheckbox.checked = false;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    //모든 개별 체크박스가 선택되었을 때 전체 선택 체크박스를 체크하는 함수\r\n    s2checkSelectAll() {\r\n      const selectAllCheckboxes = document.querySelectorAll('input[value=\"selectall\"]');\r\n      selectAllCheckboxes.forEach((selectAllCheckbox) => {\r\n        // 만약 전체 선택 박스가 체크 해제되어 있다면 실행합니다.\r\n        if (!selectAllCheckbox.checked) {\r\n          // 모든 개별 체크박스를 가져옵니다.\r\n          const checkboxes = document.querySelectorAll('input[name=\"agree\"]');\r\n          let allChecked = true;\r\n          // 모든 개별 체크박스에 대해 반복합니다.\r\n          checkboxes.forEach((checkbox) => {\r\n            // 만약 하나라도 체크되지 않은 상태라면 모든 체크박스가 선택되지 않은 것으로 표시합니다.\r\n            if (!checkbox.checked) {\r\n              allChecked = false;\r\n            }\r\n          });\r\n          // 모든 개별 체크박스가 선택되어 있다면 전체 선택 체크박스를 체크합니다.\r\n          if (allChecked) {\r\n            selectAllCheckbox.checked = true;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    //이메일 인증 버튼\r\n    async sendEmail(){\r\n      try {\r\n        const response = await axios.post('http://localhost:8080/sendEmail', {to: this.to});\r\n        this.s2message = '이메일이 성공적으로 전송 되었습니다.';\r\n      }catch (error) {\r\n        this.s2message = '이메일이 전송이 실패 했습니다.';\r\n      }\r\n    },\r\n    //사전예약 등록 버튼 alert 출력\r\n    s2AlertBtn(){\r\n      const emailMsg = document.querySelector('.s2emailMsg');\r\n      const emailVerified = emailMsg.style.display === 'block';\r\n      const selectAllCheckbox = document.querySelector('input[value=\"selectall\"]');\r\n      const allAgreed = selectAllCheckbox.checked;\r\n\r\n      if (emailVerified && allAgreed) {\r\n        // SweetAlert2로 'O' 알림을 출력하고, 확인 버튼을 누르면 다음 섹션으로 이동합니다.\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: '모든 조건이 충족되었습니다.',\r\n          showConfirmButton: true,\r\n        }).then(() => {\r\n          // alert의 확인버튼을 누를시 section3으로 이동\r\n          // section3으로 이동합니다.\r\n          fullpage_api.moveTo(4);\r\n          console.log('slide');\r\n        });\r\n      } else {\r\n        // SweetAlert2로 'X' 알림을 출력합니다.\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: '이메일 인증이 완료되었고 모든 항목에 동의해야 합니다.',\r\n          showConfirmButton: false,\r\n          timer: 1500, // 1.5초 후에 자동으로 닫힙니다.\r\n        });\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n/*Section2*/\r\n.titleImg {\r\n  position: absolute;\r\n  width: 40rem;\r\n  top: 3%;\r\n  left: 3%;\r\n  z-index: 1;\r\n}\r\n.subBg {\r\n  position: absolute;\r\n  width: 100rem;\r\n  z-index: 0;\r\n  top: 5rem;\r\n  left: 6rem;\r\n}\r\n#section2Form {\r\n  position: absolute;\r\n  left: 30rem;\r\n  top: 20rem;\r\n  z-index: 2;\r\n  flex-wrap: nowrap;\r\n  width : 50rem;\r\n}\r\n.s2submitBtn {\r\n  position: absolute;\r\n  z-index: 2;\r\n  width : 30rem;\r\n  bottom: 100px;\r\n  left: 650px;\r\n}\r\n.s2checkContainer {\r\n  position: absolute;\r\n  z-index: 2;\r\n  left: 470px;\r\n  top: 400px;\r\n}\r\n.s2emailMsg{\r\n  display: none;\r\n  position: absolute;\r\n  left: 480px;\r\n  top: 366px;\r\n  color : #007bff;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}